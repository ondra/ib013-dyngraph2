\documentclass[12pt,a4paper]{article}
\usepackage[czech]{babel}
\usepackage[utf8]{inputenc}


\author{Ondřej Herman (xherman1), Martin Milata (xmilata)}
\title{Dynamický graf II. -- dokumentace k programu}
\date{20.5.2009}

\begin{document}

\maketitle
\pagestyle{plain}

\section*{Zadání}

\paragraph{Zadání projektu}
Graf je reprezentován množinou čtveřic cha\-ra\-kte\-ri\-zu\-jí\-cích spojení
dvou uzlů (neorientované hrany): zdroj, cíl, časové razítko, trvání (stačí v
minutách).  Každý uzel může být v daném časovém okamžiku spojen s libovolným
počtem dalších uzlů. Prohledávejte takovýto graf.  Najděte největší souvislý
graf pro daný časový okamžik, pro daný časový interval, pro libovolný časový
okamžik, uzly s nejvíce spojeními, nejdelšími spojeními a podobně.  Součástí
projektu je generátor korektních dat (nesmí existovat dvě různé čtveřice, které
by popisovaly spojení dvou stejných uzlů ve stejném časovém okamžiku, např.
[a,b,200810012208,10],[a,b,200810012214,3],[b,a,20\-08\-10\-01\-2206,5]).

\paragraph{Odchylky od zadání}
Rozhodli jsme se neimplementovat test rovinnosti grafu, který je uveden v
písemné zprávě. Důvodem je to, že implementace některého z efektivních algoritmů
realizujících tento test by pravděpodobně byla rozsáhlá přibližně stejně jako
zbytek tohoto projektu.

\subsection*{Popis řešení}

Projekt se skládá z několika modulů:

\subsubsection*{Uživatelské rozhraní}
Modul \texttt{frontend} obsahuje sadu snadno použitelných predikátů
zapouzdřujících většinu funkcionality ostatních modulů:

\begin{itemize}
\item \texttt{graph\_load}/1 \\
Načte graf ze souboru. Argument je unifikován se jménem vstupního souboru.

\item \texttt{graph\_store}/1 \\
Uloží právě používaný graf do souboru jména určeného argumentem.

\item \texttt{graph\_random}/4 \\
Vytvoří náhodný dynamický graf pomocí modulu \texttt{generator}. Například
\texttt{graph\_random(10, 5, 10, 0.2).} vytvoří dynamický graf na deseti
 vrcholech přecházením mezi pěti náhodnými grafy, které mají pravděpodobnost existence každé hrany 0.2, jeden přechod přitom trvá deset času.

\item \texttt{set\_time}/2 \\
Nastaví omezení predikátů na časový interval, kde argumenty predikátu jsou jeho krajní body.

\item \texttt{clear\_time}/0 \\
Zruší omezení predikátů na časový interval.

\item \texttt{show}/0 \\
Zobrazí aktuálně používaný seznam hran a časový interval.

\item \texttt{clean}/0 \\
Obnoví čistý stav programu.

\item \texttt{cycles}/0 \\
Nalezne maximální počet cyklů.

\item \texttt{eulerian}/0 \\
Zjistí, je-li graf vždy eulerovský.

\item \texttt{longest\_cycle}/0 \\
Nalezne nejdelší cyklus grafu.

\item \texttt{max\_degree}/0 \\
Nalezne vrchol s nejvyšším počtem spojení.

\item \texttt{max\_subgraph}/0 \\
Nalezne maximální souvislý podgraf grafu.

\item \texttt{spanning\_tree}/1 \\
Vypíše kostru grafu v okamžiku určeném argumentem. Tento predikát není ovlivněn \texttt{set\_time} a \texttt{clear\_time}.

\item \texttt{path}/2 \\
Nalezne nejrychlejší cestu z vrcholu určeného prvním argumentem do vrcholu určeného druhým argumentem, existuje-li.

\item \texttt{sssp}/1 \\
Nalezne seznam nejrychlejších cest do všech vrcholů dosažitelných z kořene určeného argumentem, tvaru \texttt{vrchol-předchůdce/čas}.

\end{itemize}

\subsubsection*{Util}
Tento modul obsahuje pomocné funkce, které jsou dostatečně obecné na to, aby se
daly využít ve více modulech implementujících nějaký algoritmus. Jedná se
zejména o predikáty pro převod mezi různými reprezentacemi grafu a práci s nimi.
Graf je možné reprezentovat několika způsoby, podle toho, který je v dané
situaci vhodný.

\begin{description}
	\item[Seznam čtveřic] -- respektive seznamů o délce čtyři, kde první dvě
	položky udávají koncové vrcholy hrany, třetí čas jejího vzniku a čtvrtá
	čas jejího zániku. Tato reprezentace je použita pro vstup (viz písemná
	zpráva).

	\item[Seznam událostí] Seznam termů, obsahujících časové razítko, seznam
	přidaných hran a seznam odebraných hran. Časové razítko určuje okamžik,
	ve kterém byly tyto hrany přidány/odebrány. Termy jsou seřazeny podle
	času. Tato reprezentace je vhodná pro algoritmy, které pracují přímo s
	dynamickým grafem.

	\item[Seznam hran] Statický graf reprezentovaný seznamem hran ve tvaru
	\texttt{a-b}. Používané algoritmy pracujícími nad statickým grafem,
	obvykle rekurzivně nad seznamem hran.

	\item[Ugraph] Reprezentace používaná standardní knihovnou
	\texttt{ugraphs}. Seznam dvojic \texttt{vrchol-seznam\_sousedu}. Tato
	reprezentace je potřebná pro využití predikátů poskytnutých výše
	zmíněnou knihovnou.
\end{description}

\subsubsection*{Generator}
Generování náhodného dynamického grafu. Korektnost výstupních dat je zajištěna generováním posloupnosti náhodných grafů pomocí knihovny \texttt{ugraphs}, mezi nimiž jsou spočítány oba rozdíly sousedních grafů posloupnosti. To odpovídá sekvencím operací vložení a odstranění hran pro přechod od jednoho z grafů k druhému. Operace jsou pak opatřeny náhodným časovým razítkem z intervalu příslušejícímu dané dvojici grafů, spojeny s operacemi vytvořenými v ostatních intervalech a převedeny na ,,čtveřice''.


\subsubsection*{Cycles}
Zjištění maximálního počtu cyklů v zadaném okamžiku nebo časovém intervalu. Je
implementováno jako procházení do hloubky každého (statického) grafu v sekvenci
grafů, které existují v zadaném časovém intervalu.  Prohledávání do hloubky
(dále DFS) je spuštěno z nějakého vrcholu grafu, pokud po nějaké cestě dosáhne
vrcholu ze kterého je spuštěno je započítán cyklus a pokračuje dále, dokud
neprojde všechny dosažitelné vrcholy. Protože hledáme v neorientovaném grafu, je
každý cyklus nalezen dvakrát (oba ,,směry`` projití tohoto cyklu jsou započítány
jako cyklus) a tedy je nutno výsledek vydělit dvěma. Nakonec zjistíme, zda-li
byly navštíveny všechny vrcholy aktuálního grafu. Pokud tomu tak není, znamená
to, že graf není spojitý a musíme DFS spustit znova z nějakého vrcholu, který
předtím nebyl navštíven, což opakujeme dokud jsme nenavštívili všechny vrcholy
(opakování se provede tolikrát, kolik je v grafu komponent).

\subsubsection*{Eulerian}
Test na ,,eulerovskost`` grafu, tedy zda-li se dá graf nakreslit jedním tahem
(tak, abychom se vrátili do stejného vrcholu, ze kterého jsme začali). Je možno
testovat graf v určitém časovém okamžiku, nebo zda-li si graf tuto vlastnost
udržuje v nějakém časovém intervalu.

Tato vlastnost je ekvivalentní tomu, že je graf spojitý a každý vrchol má sudý
stupeň. Stačí tedy v každém statickém grafu v sekvenci grafů indukované %wtf indeed
dynamickým grafem zjistit jeho spojitost a sudost všecho jeho vrcholů.

\subsubsection*{Longest\_cycle}
Nalezení nejdelšího cyklu v zadaném okamžiku nebo časovém intervalu.
Implementace je velmi podobná predikátu \texttt{cycles} -- provádí se
prohledávání grafů do hloubky, s tím rozdílem, že se nepočítá celkový počet
cyklů, ale hledá se ten nejdelší.

\subsubsection*{Max\_degree}
Nalezení vrcholu s největším stupněm (největším počtem spojení) v nějakém
okamžiku nebo intervalu.  Algoritmus pro každý statický graf indukovaný
dynamickým grafem určí stupeň s nejvyšším stupněm a z nich pak vybere maximální.

Pokud zadaný (dynamický) graf neobsahuje po celou dobu ani jeden vrchol,
predikát selže -- dotaz na vrchol s nejvyšším stupněm v takovém případě nedává
smysl.

\subsubsection*{Max\_subgraph}
Nalezne největší souvislý podgraf v čase/intervalu. Je implementováno jako
rozklad na souvislé komponenty každého statického grafu a výběr té největší
komponenty. Komponenty (podgrafy) porovnáváme podle počtu vrcholů, pokud se
rovnají, porovnáváme počet hran.

\subsubsection*{Path}
Tento modul obsahuje algoritmy pro nalezení nejkratší cesty mezi dvěma vrcholy a nejkratších cest z vybraného vrcholu do všech ostatních. Použitý algoritmus se podobá Dijkstrovu - protože seznam vstupních událostí je seřazen podle času, není nutné druhé a další navštívení vrcholu uvažovat. Cesty však nemusí vznikat v pořadí, proto je třeba při prvním navštívení vrcholu navštívit i všechny jeho nenavštívené následníky.

\subsubsection*{Spanning\_tree}
Hledání (minimální) kostry grafu. Vzhledem k tomu, že bez bližšího upřesnění
nedává hledání kostry na dynamickém grafu smysl, funguje pouze pro zadaný
okamžik v čase. Pokud není graf spojitý, je nalezen minimální les grafu.

\subsection*{Použité cizí predikáty}

V projektu jsou využity predikáty z knihoven SICStus prologu \texttt{lists}
(práce se seznamy), \texttt{random} (generátor náhodných čísel),
\texttt{samsort} (obecný predikát pro řazení termů) a \texttt{ugraphs}
(predikáty pro práci s neohodnocenými grafy). Všechny ostatní predikáty jsou
naší vlastní prací.

\end{document}
